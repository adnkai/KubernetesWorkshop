apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: backend
        image: mykubecr.azurecr.io/backend:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - mountPath: "/mnt/azure"
          name: volume
      volumes:
      - name: volume
        persistentVolumeClaim:
          claimName: mykubefiles
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
spec:
  type: ClusterIP # Default. Alternatives: NodePort, LoadBalancer, ExternalName
  ports:
    - port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: frontend
        image: mykubecr.azurecr.io/frontend:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - mountPath: "/mnt/azure"
          name: volume
      volumes:
      - name: volume
        persistentVolumeClaim:
          claimName: mykubefiles
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  type: LoadBalancer
  ports:
    - port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: frontend
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: mykubefiles
provisioner: kubernetes.io/azure-file
mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=0
  - gid=0
  - mfsymlinks
  - cache=strict
  - actimeo=30
parameters:
  skuName: Standard_LRS
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mykubefiles
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: mykubefiles
  resources:
    requests:
      storage: 5Gi

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: frontend
#   namespace: kube-public
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: frontend
#   template:
#     metadata:
#       labels:
#         app: frontend
#     spec:
#       nodeSelector:
#         "beta.kubernetes.io/os": linux
#       containers:
#       - name: frontend
#         image: mykubecr.azurecr.io/frontend:v
#         resources:
#           requests:
#             cpu: 100m
#             memory: 128Mi
#           limits:
#             cpu: 250m
#             memory: 256Mi
#         env:
#         - name: BACKEND
#           value: "backend"
#         ports:
#         - name: http
#           containerPort: 80
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend
#   namespace: kube-public
#   labels:
#     app: frontend
# spec:
#   type: LoadBalancer
#   ports:
#     - port: 80
#       protocol: TCP
#       targetPort: http
#   selector:
#     app: frontend